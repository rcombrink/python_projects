# Global values setup
import random
suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10, 'Queen':10, 'King':10, 'Ace':11}
playing = True


# Card class organization and return str of 'suit' of 'rank'
class Card():
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank
    def __str__(self):
        return self.rank+ " of " +self.suit


# Deck Class, creation of 52 card deck, shuffling of deck, and dealing cards to player & dealer
class Deck():
    def __init__(self):
        self.deck = []
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit,rank))
    def __str__(self):
        deck_comp = ''
        for card in self.deck:
            deck_comp += '\n' + card.__str__()
        return 'The deck has: '+deck_comp
    def shuffle(self):
        random.shuffle(self.deck)
    def deal(self):
        single_card = self.deck.pop()
        return single_card


# Hand class, dealing 2 cards to player & dealer, defining Ace as 11 or 1 based on hand value
class Hand():
    def __init__(self):
        self.cards = []
        self.value = 0
        self.aces = 0
    def add_card(self,card):
        self.cards.append(card)
        self.value += values[card.rank]
        if card.rank == 'Ace':
            self.aces += 1
    def adjust_for_ace(self):
        while self.value > 21 and self.aces:
            self.value -= 10
            self.aces -= 1


# Chips class for adding/subtracting chips from player's total chip count
class Chips():
    def __init__(self,total = 100):
        self.total = total
        self.bet = 0
    def win_bet(self):
        self.total += self.bet
    def lose_bet(self):
        self.total -= self.bet


# Take Bet class for player betting amount of chips per deal
def take_bet(chips):
    while True:
        try:
            chips.bet = int(input('How many chips would you like to bet? '))
        except:
            print('Sorry, please provide an integer.')
        else:
            if chips.bet > chips.total:
                print('Sorry you do not have enough chips. You have {}'.format(chips.total))
            else:
                break


# Hit class
def hit(deck,hand):
    single_card = deck.deal()
    hand.add_card(single_card)
    hand.adjust_for_ace()


# Hit or Stand class, asking the player to either Hit ('h') or Stand ('s')
def hit_or_stand(deck,hand):
    global playing
    while True:
        x = input('Hit or Stand? Enter h or s. ')
        if x[0].lower() == 'h':
            hit(deck,hand)
        elif x[0].lower() == 's':
            print("Player stands. Dealer's turn.")
            playing = False
        else:
            print('Sorry I did not understand that.  Please enter 'h' or 's' only!')
            continue
        break


# Player & Dealer busts & wins scenarios
def player_busts(player,dealer,chips):
    print("Player busts!")
    chips.lose_bet()

def player_wins(player,dealer,chips):
    print("Player wins!")
    chips.win_bet()

def dealer_busts(player,dealer,chips):
    print("Player wins! Dealer busts!")
    chips.win_bet()

def dealer_wins(player,dealer,chips):
    print("Dealer wins!")
    chips.lose_bet()

def push(player,dealer):
    print("Dealer and player tie! PUSH! ")


# Show Some player's & dealer's cards (one card is hidden for the dealer)
def show_some(player,dealer):
    print("Dealer's hand: ")
    print("one card hidden!")
    print(dealer.cards[1])
    print('\n')
    print("Player's hand: ")
    for card in player.cards:
        print(card)


# Show All player's & dealer's cards (all cards shown)
def show_all(player,dealer):
    print("Dealer's hand: ")
    for card in dealer.cards:
        print(card)
    print('\n')
    print("Player's hand: ")
    for card in player.cards:
        print(card)


# Blackjack Run Game Code
while True:

		# Welcome statement
    print("Welcome to Blackjack!")

    # Create & shuffle the deck, deal two cards to each player
    deck = Deck()
    deck.shuffle()

    player_hand = Hand()
    player_hand.add_card(deck.deal())
    player_hand.add_card(deck.deal())

    dealer_hand = Hand()
    dealer_hand.add_card(deck.deal())
    dealer_hand.add_card(deck.deal())

    # Set up the player's chips
    player_chips = Chips()

    # Prompt the player for their bet
    take_bet(player_chips)

    # Show cards (keeps one dealer card hidden)
    show_some(player_hand,dealer_hand)

    while playing:

        # Ask player to hit ('h') or stand ('s')
        hit_or_stand(deck, player_hand)

        # Show cards (keeping one dealer card hidden)
        show_some(player_hand,dealer_hand)

        # If player's hand exceeds 21, break out of loop
        if player_hand.value > 21:
            player_busts(player_hand,dealer_hand,player_chips)
            break

    # If player hasn't busted, hit Dealer's hand until Dealer reaches 17+
    if player_hand.value <= 21:

        while dealer_hand.value < 17:
            hit(deck,dealer_hand)

        # Show all cards
        show_all(player_hand,dealer_hand)

        # Run different winning scenarios
        if dealer_hand.value > 21:
            dealer_busts(player_hand,dealer_hand,player_chips)
        elif dealer_hand.value > player_hand.value:
            dealer_wins(player_hand,dealer_hand,player_chips)
        elif dealer_hand.value < player_hand.value:
            player_wins(player_hand,dealer_hand,player_chips)
        else:
            push(player_hand,dealer_hand)

    # Inform player of their chips total
    print("\n Player's total chips are at {}".format(player_chips.total))

    # Ask player if they would like to play again
    new_game = input('Would you like to play another hand? y or n. ')

    if new_game[0].lower() == 'y':
        playing = True
        continue
    else:
        print("Thank you for playing!")
        break
