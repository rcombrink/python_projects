# Global values setup
import random
suits = ('Hearts','Diamonds','Spades','Clubs')
ranks = ('Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten','Jack','Queen','King','Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 
          'Nine':9, 'Ten':10, 'Jack':11, 'Queen':12, 'King':13, 'Ace':14}


# Card class creating 52 cards, and returning as 'rank' of 'suit'
class Card():
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank
        self.value = values[rank]

    def __str__(self):
        return self.rank + " of " + self.suit


# Deck creation
class Deck():
    def __init__(self):
        self.all_cards = []
        for suit in suits:
            for rank in ranks:

                #Create card object
                created_card = Card(suit,rank)
                self.all_cards.append(created_card)

    def shuffle(self):
        random.shuffle(self.all_cards)

    def deal_one(self):
        return self.all_cards.pop()


# Player class initializing all cards as an empty list, playing a card, and adding cards when War is won
class Player():
    def __init__(self,name):
        self.name = name
        self.all_cards = []

    def remove_one(self):
        return self.all_cards.pop(0)

    def add_cards(self,new_cards):
        if type(new_cards) == type([]):

            # List of multiple card objects
            self.all_cards.extend(new_cards)
        else:

            # Single card object
            self.all_cards.append(new_cards)

    def __str__(self):
        return f'Player {self.name} has {len(self.all_cards)} cards.'


# Game setup
player_one = Player("Ryan")
player_two = Player("Sabrina")
new_deck = Deck()
new_deck.shuffle()

for x in range(26):
    player_one.add_cards(new_deck.deal_one())
    player_two.add_cards(new_deck.deal_one())


# Run Game Code
round_number = 0

# While game_on
game_on = True
while game_on:
    round_number += 1
    print(f"Round {round_number}")

    if len(player_one.all_cards) == 0:
        print("Ryan is out of cards!  Sabrina wins!")
        game_on = False
        break

    if len(player_two.all_cards) == 0:
        print("Sabrina is out of cards!  Ryan wins!")
        game_on = False
        break

    # Start a new round
    player_one_cards = []
    player_one_cards.append(player_one.remove_one())

    player_two_cards = []
    player_two_cards.append(player_two.remove_one())

    # While at war
    at_war = True
    while at_war:
        if player_one_cards[-1].value > player_two_cards[-1].value:
            player_one.add_cards(player_one_cards)
            player_one.add_cards(player_two_cards)
            at_war = False
        elif player_one_cards[-1].value < player_two_cards[-1].value:
            player_two.add_cards(player_one_cards)
            player_two.add_cards(player_two_cards)
            at_war = False
        else:
            print('WAR!')
            if len(player_one.all_cards) < 5:
                print("Ryan is unable to declare war!")
                print("Sabrina wins!")
                game_on = False
                break
            elif len(player_two.all_cards) < 5:
                print("Sabrina is unable to declare war!")
                print("Ryan wins!")
                game_on = False
                break
            else:
                for num in range(5):
                    player_one_cards.append(player_one.remove_one())
                    player_two_cards.append(player_two.remove_one())
